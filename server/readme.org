* Usage

#+begin_src common-lisp
(async-py-eval "[1, 2, [True, False], {3:4}, \"hello\", 5.6, 7+8j]")
;; => #(1 2 #(T NIL) #<HASH-TABLE :TEST EQUALP :COUNT 1 {701DE33203}> "hello" 5.6d0 #C(7.0d0 8.0d0))
#+end_src

#+begin_src common-lisp
(async-py-exec "def g (): return 8")
(async-py-eval "g()")
;; => 8 (4 bits, #x8, #o10, #b1000)
#+end_src

* Features to add

+ =defpyfun=, =defpymodule=
+ Passing lisp objects (e.g. symbols and the general) to python.
+ Passing python objects to Lisp.
+ Garbage collection for remote object handlers.

* Current problems

FastAPI can handle around 200 requests per second.

However, python cannot afford too many threads at a time. So we
shouldn't make say 10k requests during a short period of time.

For larger data (e.g. gigantic matrices), we can use shared
memory in the future.

** NOTE: shared memory communication

For sharing larger objects between Lisp and Python, we can use
shared memory (e.g. [[https://sr.ht/~shunter/posix-shm/][posix-shm: POSIX shared memory bindings for
Common Lisp]]). For usual communication, lets ditch FastAPI and
try ZeroMQ.

** NOTE: CL-ZMQ can't be loaded correctly

CFFI/GROVEL.. I don't know how to fix

